name: Create Release aarch64_generic
#on: [push]
on:
  push:
    tags:
      - "*.*.*"
jobs: 
  build:
    name: "${{ matrix.build_env.pkgarch}} :: ${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}} build"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_env:
            pkgarch: x86_64
            target: x86
            subtarget: 64
            vermagic: "348ebc762ef9e5b783ead2930262d588"

    steps:
      - uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt
          fetch-depth: 0
          
      - name: Get snapshot commit SHA and device ARCH
        run: |
          SNAPSHOT_COMMIT_SHA=$(wget -qO- "https://downloads.openwrt.org/snapshots/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/version.buildinfo" | cut -d'-' -f2)
          echo "Snapshot commit SHA: $SNAPSHOT_COMMIT_SHA"
          echo "SNAPSHOT_COMMIT_SHA=$SNAPSHOT_COMMIT_SHA" >> $GITHUB_ENV
          echo "DEVICE_ARCH=${{ matrix.build_env.pkgarch }}" >> $GITHUB_ENV

      - name: Checkout snapshot commit in openwrt repo
        run: git checkout ${{ env.SNAPSHOT_COMMIT_SHA}}

      - name: Install Python3 elftools module
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install pyelftools

      - name: Building kernel and tools
        #if: ${{ steps.cache-tools-kernel.outputs.cache-hit != 'true' }}
        run: |
          echo "pkgarch: ${{ matrix.build_env.pkgarch}}, target:${{ matrix.build_env.target}}, subtarget: ${{ matrix.build_env.subtarget}}"
          
          # Setup & install feeds
          wget https://downloads.openwrt.org/snapshots/targets/x86/64/feeds.buildinfo -O feeds.conf
          echo "src-git awgopenwrt https://github.com/samara1532/amneziawg-Rockchip.git" >> ./feeds.conf
          ./scripts/feeds update && ./scripts/feeds install -a
          
          # Setup config with AWG and dependencies
          wget https://downloads.openwrt.org/snapshots/targets/x86/64/config.buildinfo -O .config
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m" >> .config
          
          make defconfig
          
          echo "    > make tools/install"
          make tools/install -i -j `nproc`
          
          cat ./build_dir/target-*/linux-*/linux-*/.vermagic || true
          
          echo "    > make toolchain/install"
          make toolchain/install  -i -j `nproc`
          
          cat ./build_dir/target-*/linux-*/linux-*/.vermagic || true
          # compile kernel module
          echo "    > make target/linux/compile"
          make target/linux/compile  -i -j `nproc` V=s
          
          VERMAGIC=`cat ./build_dir/target-*/linux-*/linux-*/.vermagic`
          VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}
          if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
            echo Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED
            exit 1
          fi
          
      - name: Build AmneziaWG
        run: |
          VERMAGIC=`cat ./build_dir/target-*/linux-*/linux-*/.vermagic`
          echo "Vermagic: $VERMAGIC"
          VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}
          if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
            echo Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED
            exit 1
          fi
          # Ignore kmod build for some targets, replace with the awg-go
          make package/kmod-amneziawg/{clean,download,prepare} V=s || true
          make package/kmod-amneziawg/compile V=s || true
          make package/luci-app-amneziawg/{clean,download,prepare}
          make package/luci-app-amneziawg/compile V=s
          make V=s package/amneziawg-tools/{clean,download,prepare}
          make V=s package/amneziawg-tools/compile
          
      - name: Prepare artifacts
        run: |
          tag_name=${{  github.ref_name }}
          mkdir -p awgrelease
          postfix="${{ matrix.build_env.tag }}_${{ matrix.build_env.vermagic }}_${{ matrix.build_env.pkgarch}}_${{ matrix.build_env.target}}_${{ matrix.build_env.subtarget}}"
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-tools-*.apk awgrelease/amneziawg-tools_${postfix}.apk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/luci-app-amneziawg-*.apk awgrelease/luci-app-amneziawg_${postfix}.apk
          cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/kmod-amneziawg-*.apk awgrelease/kmod-amneziawg_${postfix}.apk
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: awgrelease/*.apk
